type User @entity {
  id: ID!
  address: Bytes!
  balances: [Balance!] @derivedFrom(field: "user")
  transactions: [Transaction!] @derivedFrom(field: "user")
}

type Market @entity {
  id: ID!
  address: Bytes!
  supplyIndex: BigInt!
  supplyUpdateBlockTimestamp: BigInt!
  borrowIndex: BigInt!
  borrowUpdateBlockTimestamp: BigInt!
  lastPoolSupplyIndex: BigInt!
  lastP2PSupplyIndex: BigInt!
  lastPoolBorrowIndex: BigInt!
  lastP2PBorrowIndex: BigInt!
  lastTotalSupply: BigInt!
  lastTotalBorrow: BigInt!
}

type Balance @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: Int!
  market: Market!
  user: User!
  underlyingSupplyBalance: BigInt!
  underlyingBorrowBalance: BigInt!
  userSupplyIndex: BigInt!
  userBorrowIndex: BigInt!
  unclaimedMorpho: BigInt!
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: Int!
  market: Market!
  user: User!
  type: TransactionType!
  underlyingSupplyBalance: BigInt!
  underlyingBorrowBalance: BigInt!
}

enum TransactionType {
  Supply,
  Borrow,
  Withdraw,
  Repay
}
